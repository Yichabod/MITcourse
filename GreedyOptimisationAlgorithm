def greedy_cow_transport(cows,limit=10):
    """
    Uses a greedy heuristic to determine an allocation of cows that attempts to
    minimize the number of spaceship trips needed to transport all the cows. The
    returned allocation of cows may or may not be optimal.

    Parameters:
    cows - a dictionary of name (string), weight (int) pairs
    limit - weight limit of the spaceship (an int)
    
    Returns:
    A list of lists, with each inner list containing the names of cows
    transported on a particular trip and the overall list containing all the
    trips
    
    Note that this would work for any transport/knapsack type problem where there is a known limit and items
    that can be added to a container to reach the limit (i.e. each item's addition doesn't effect the others'
    magnitude)
    """
    dList = []
    temp = [] # this is the temporary list that will get added to the bigger list

    def getKey(item):
        return item[1]

    for key, value in cows.items():
        temp = [key, value]
        dList.append(temp)
    dList = sorted(dList, key=getKey, reverse=True)  # to get list of lists of cowDict
    dCopy = dList[:]
    space = limit
    sumTrip = []
    tempTrip = []
    weight = 0
    while len(dList) > 0:
        for elt in dCopy:
          if elt in dList:
                if weight + elt[1] <= space:
                  if elt not in sumTrip:
                    tempTrip.append(elt[0])
                    weight += elt[1]
                    if len(dList) == 1:
                      sumTrip.append(tempTrip)
                    dList.remove(elt)
                elif weight + dList[-1][1] > space:  # won't work for final cases
                    sumTrip.append(tempTrip)
                    tempTrip = []
                    weight = 0
                    break
          
                
    return sumTrip

## This is a simple decrypting program that uses classes and instances and a brute force
## program to find the optimal solution to an encrypted string

class Message(object):
    def __init__(self, text):
        '''
        Initializes a Message object      
        text (string): the message's text
        a Message object has two attributes:
            self.message_text (string, determined by input text)
            self.valid_words (list, determined using helper function load_words)
        '''
        self.message_text = text
        self.valid_words = load_words(WORDLIST_FILENAME)
        
    def get_message_text(self):
        '''
        Used to safely access self.message_text outside of the class
        Returns: self.message_text
        '''
        return self.message_text

    def get_valid_words(self):
        '''
        Returns a copy of self.valid_words for access outside of class
        '''
        return self.valid_words[:]
        
    def build_shift_dict(self, shift):
        '''
        Creates a dictionary that can be used to apply a cipher to a letter.
        The dictionary maps every uppercase and lowercase letter to a
        character shifted down the alphabet by the input shift. The dictionary
        should have 52 keys of all the uppercase letters and all the lowercase
        letters only.        
        
        shift (integer): the amount by which to shift every letter of the 
        alphabet. 0 <= shift < 26

        Returns: a dictionary mapping a letter (string) to 
                 another letter (string). 
        '''
        import string
        index = 0
        n = shift
        dict = {}
        for letter in string.ascii_lowercase:
            index = string.ascii_lowercase.index(letter)
            if index + n > 25:
                index = (index + n) - 26
                dict[letter] = string.ascii_lowercase[index]
            elif index + n <= 25:
                index = index + n
                dict[letter] = string.ascii_lowercase[index]
        for letter in string.ascii_uppercase:
            index = string.ascii_uppercase.index(letter)
            if index + n > 25:
                index = (index + n) - 26
                dict[letter] = string.ascii_uppercase[index]
            elif index + n <= 25:
                index = index + n
                dict[letter] = string.ascii_uppercase[index]
        return dict

    def apply_shift(self, shift):
        '''
        Applies the Caesar Cipher to self.message_text with the input shift.
        Creates a new string that is self.message_text shifted down the
        alphabet by some number of characters determined by the input shift        
        
        shift (integer): the shift with which to encrypt the message.
        0 <= shift < 26

        Returns: the message text (string) in which every character is shifted
             down the alphabet by the input shift
        '''
        shiftString = ''
        shiftDict = self.build_shift_dict(shift)
        for char in self.message_text:
            if char in string.ascii_letters:
                shiftString += shiftDict[char]
            elif char not in string.ascii_letters:
                shiftString += char
        return shiftString

class CiphertextMessage(Message):
    def __init__(self, text):
        '''
        Initializes a CiphertextMessage object
                
        text (string): the message's text

        a CiphertextMessage object has two attributes:
            self.message_text (string, determined by input text)
            self.valid_words (list, determined using helper function load_words)
        '''
        Message.__init__(self,text)

    def decrypt_message(self):
        '''
        Decrypt self.message_text by trying every possible shift value
        to find the "best" one. 'Best' is one that creates the maximum
        number of real words.
        '''
        testShift = 25
        testString = ''
        bestShift = 0
        bestString = ''
        bestPoint = 0
        while testShift >= 0:
          testString = Message.apply_shift(self, testShift)
          testShift -= 1
          testList = str.split(testString)
          for word in testList:
            testPoint = 0
            if is_word(self.valid_words, word) == True:
              testPoint += 1
          if testPoint > bestPoint:
            bestPoint = testPoint
            bestShift =  testShift + 1
            bestString = testString
        return bestShift, bestString
